node {
    def repositoryUrl = 'https://github.com/fvcastellanos/workshop-app.git'
    def mavenImageName = 'maven:3.9-eclipse-temurin-21'

    withCredentials([
        usernamePassword(credentialsId: 'github-credentials', usernameVariable: 'GIT_CREDENTIALS_USR', passwordVariable: 'GIT_CREDENTIALS_PSW'),
    ]) {

        stage('Checkout') {
            checkout scm: scmGit(
                branches: [[name: 'feature/WE-40']],
                extensions: [],
                userRemoteConfigs: [[
                    credentialsId: 'github-credentials',
                    url: repositoryUrl
                ]]
            )
        }

        stage('Determine Release Version') {

            def pomVersion = ''

            docker.image(mavenImageName)
                .inside {
                    pomVersion = sh(
                        script: 'mvn help:evaluate -Dexpression=project.version -q -DforceStdout',
                        returnStdout: true
                    ).trim()            
                    echo "Current POM version: ${pomVersion}"
                }


            // Remove -SNAPSHOT suffix
            def releaseVersion = pomVersion.replaceAll(/-SNAPSHOT$/, '')

            // Split version into parts
            def (major, minor) = releaseVersion.tokenize('.')

            // Get version strategy from parameter (default to 'Keep')
            def strategy = params.VERSION_STRATEGY ?: 'Keep'

            switch(strategy) {
                case 'Major':
                    major = (major.toInteger() + 1).toString()
                    minor = '0'
                break
                case 'Minor':
                    minor = (minor.toInteger() + 1).toString()
                break
                case 'Keep':
                    // Do nothing
                break
                default:
                    error "Unknown VERSION_STRATEGY: ${strategy}"
            }

            def nextVersion = [major, minor, patch].join('.')
            echo "Current version: ${pomVersion}"
            echo "Release version: ${releaseVersion}"
            echo "Next version (${strategy}): ${nextVersion}"

            // Set as environment variable for later stages
            env.RELEASE_VERSION = releaseVersion
            env.NEXT_VERSION = nextVersion
        }
    }

}
